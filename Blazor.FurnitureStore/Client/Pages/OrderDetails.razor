@page "/orderDetails"
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

@inject IProductCategoryService _productCategoryService
@inject IProductService _productService
@inject IClientService _clientService
@inject IOrderService _orderService
@inject NavigationManager _navigation
@inject IDialogService _dialagoService

<p>@Mesage</p>

@if ( Order is not null)
{
    <EditForm Model="@Order" OnValidSubmit="SaveOrder">

        <div class="card">
            <h5 class="card-header">Order Details</h5>
            <div class="card-body">
                <div class="container">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="submit" class="btn btn-success" value="Save" />
                            <input type="button" class="btn btn-secondary" value="Cancel" @onclick="Cancel"/>
                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Number:</label>
                            <InputNumber class="form-control" @bind-Value="@Order.OrderNumber"/>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Order Date:</label>
                            <InputDate class="form-control" @bind-Value="@Order.OrderDate" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label>Client:</label>
                            <InputSelect class="form-select" @bind-Value="@Order.ClientId" >
                                @foreach (var item in clients)
                                {
                                    <option value="@item.Id">@item.FirstName @item.LastName</option>
                                }
                            </InputSelect>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label>Delivery Date:</label>
                            <InputDate class="form-control" @bind-Value="@Order.DeliveryDate" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label>Total:</label>
                            <input type="text" class="form-control" readonly="readonly" value="@Order.Total.ToString("C")" />
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                        </div>
                        <div class="col-md-4 mb-3">
                            <input type="button" class="btn btn-secondary" value="Add Product" @onclick="AddProduct" />
                        </div>
                        <div class="col-md-4 mb-3">
                        </div>
                    </div>
                </div>
            </div>
        </div>


        @if(Order.Products is not null && Order.Products.Any())
        {
            <MudTable Items="@Order.Products" Hover="true" Breakpoint="Breakpoint.Sm"> 
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Products</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Price</MudTh>
                    <MudTh>Quantity</MudTh>
                </HeaderContent>
                <RowTemplate Context="ProductContext">
                    <MudTd DataLabel="Name">@ProductContext.Name</MudTd>
                    <MudTd DataLabel="Price">@ProductContext.Price</MudTd>
                    <MudTd DataLabel="Quantity">@ProductContext.Quantity</MudTd>
                    <MudTd DataLabel=""></MudTd>
                </RowTemplate>
            </MudTable>
        }

    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    public Order Order;

    public IEnumerable<Blazor.FurnitureStore.Shared.Client> clients;
    public string Mesage { get; set; }
    public int produtId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Order = new Order() 
            { 
                OrderNumber = await _orderService.GetNextNumber(),
                ProductCategoryId = 1,
                OrderDate = DateTime.Now,
                DeliveryDate = DateTime.Today.AddDays(7)
            };

            await LoadClients();
        }
        catch (Exception ex)
        {
            Mesage = $"Ocurrio un error: {ex.Message}";
            throw;
        }
    }



    private async Task LoadClients()
    {
        clients = await _clientService.GetClients();
    }

    protected async Task SaveOrder()
    {
        await _orderService.Save(Order);
    }

    private void NavigateHome()
    {
        _navigation.NavigateTo("/");
    }

    private void Cancel()
    {
        NavigateHome();
    }

    protected async Task AddProduct()
    {
        var dialog = _dialagoService.Show<ProductDetails>("Product Details");

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var product = (Product)result.Data;

            if (Order.Products is null)
                Order.Products = new List<Product>();

            Order.Products.Add(product);
        }
    }
}
